#+title: Emacs Configuration README

This document outlines the structure, packages, and keybindings for this Emacs configuration.

* Introduction

This is a literate Emacs configuration managed in an Org file (`config.org`). The main Emacs initialization file (`init.el`) simply loads and executes the code blocks from `config.org`. This approach keeps the configuration organized, documented, and easy to extend.

* Installation

1.  Clone or place these files into your `~/.emacs.d/` directory.
2.  Start Emacs.

On the first startup, Emacs will automatically download and install all the required packages. This might take a few minutes depending on your internet connection.

* Structure

- `init.el`: The main entry point. It loads `config.org`. **Do not edit this file directly.**
- `config.org`: The heart of the configuration. All packages and settings are configured here using Org Babel source blocks.
- `lisp/`: A directory for any custom Elisp functions or libraries you want to add. This directory is added to the `load-path`.

* Installed Packages

**Core & UI**
- `use-package`: For managing package configurations.
- `which-key`: Displays available keybindings in a popup.
- *Window Decorations*: The menu bar, tool bar, and scroll bar are disabled for a minimal interface.
- *Line Numbers*: Relative line numbers are enabled globally.

**Editing (Evil Mode)**
- `evil`: Provides Vim emulation.
- `evil-collection`: Integrates `evil` with many other packages.
- `evil-leader`: Sets up a leader key, which is bound to `<SPC>` (the spacebar), though keybindings are defined directly in `config.org`.

**Completion Framework (Vertico)**
- `vertico`: A modern, vertical completion UI. Replaces the default completion for `M-x`, buffer switching, etc.
- `marginalia`: Adds helpful annotations to completion candidates.
- `consult`: Provides a suite of powerful search and navigation commands.
- `orderless`: A flexible completion style that allows matching items in any order.
- `embark`: Provides contextual actions on completion candidates and the region.
- `embark-consult`: Integrates Embark with Consult.

**Programming & Development**
- `tree-sitter`: A modern parsing framework for syntax highlighting and code analysis.
- `tree-sitter-langs`: Provides the language grammars for `tree-sitter`.
- `eglot`: A lightweight LSP (Language Server Protocol) client for code intelligence (diagnostics, completion, etc.).
- `projectile`: For project management and navigation.

**Org Mode**
- `org-bullets`: Replaces the standard asterisks in Org headlines with prettier UTF-8 bullets.
- `org-superstar`: Beautifies Org mode headlines and item bullets.

* Keybindings

All custom keybindings are now embedded directly in the `WHICH-KEY` section of `config.org`.

**Global**
| Keybinding | Command                  | Description                                       | Package      |
|------------+--------------------------+---------------------------------------------------+--------------|
| `C-.`      | `embark-act`             | Perform an action on the current completion item. | `embark`       |
| `M-.`      | `embark-dwim`            | "Do What I Mean" action on the item at point.     | `embark`       |
| `C-h B`    | `embark-bindings`        | Show all available Embark keybindings.            | `embark`       |

**Leader Keys (`<SPC>`)**

***File & Project Navigation***
| Keybinding | Command                  | Description                                       | Package      |
|------------+--------------------------+---------------------------------------------------+--------------|
| `<SPC> f f`| `consult-find`           | Find file anywhere.                               | `consult`      |
| `<SPC> f b`| `consult-buffer`         | Switch to an open buffer.                         | `consult`      |
| `<SPC> s g`| `consult-grep`           | Search for a string in the current project.       | `consult`      |
| `<SPC> f p`| `projectile-find-file`   | Find file within the current project.             | `projectile`   |
| `<SPC> f r`| `consult-recent-file`    | Find a recently opened file.                      | `consult`      |

**Normal Mode Keys (No Prefix)**

***LSP Actions (Code Intelligence)***
These bindings start with `g` in normal mode.
| Keybinding | Command                  | Description                                       | Package      |
|------------+--------------------------+---------------------------------------------------+--------------|
| `g r n`    | `eglot-rename`           | Rename the symbol at point.                       | `eglot`        |
| `g r r`    | `eglot-find-references`  | Find all references to the symbol at point.       | `eglot`        |
| `g r a`    | `eglot-code-actions`     | Show available code actions (e.g., refactors).    | `eglot`        |
| `g r i`    | `eglot-find-implementation`| Find the implementation of the symbol at point.   | `eglot`        |
| `g r t`    | `eglot-find-declaration` | Go to the definition/declaration of the symbol.   | `eglot`        |

* Extensibility

To add a new package:
1.  Open `config.org`.
2.  Create a new heading for the package (e.g., `* MY NEW PACKAGE`).
3.  Add a `use-package` block for it. Make sure to include `:ensure t` to have it installed automatically.

Example:
#+begin_src org
,* MY NEW PACKAGE

,#+begin_src emacs-lisp
(use-package my-new-package
  :ensure t
  :config
  ;; Your configuration here
  )
,#+end_src
#+end_src

For custom Elisp functions, you can create a `.el` file in the `lisp/` directory and it will be available to be loaded.
