#+TITLE: Emacs Config
#+AUTHOR: Ezechukwu
#+PROPERTY: header-args:emacs-lisp :tangle ~/.cache/emacs/config.el
#+STARTUP: fold

* TABLE OF CONTENTS :TOC:
- [[#utilites][UTILITES]]
- [[#package-management][PACKAGE MANAGEMENT]]
- [[#ui-customization][UI CUSTOMIZATION]]
- [[#emacs-default][EMACS DEFAULT]]
- [[#which-key][WHICH-KEY]]
- [[#font][FONT]]
- [[#magit][MAGIT]]
- [[#org-mode][ORG MODE]]
- [[#evil-mode][EVIL MODE]]
- [[#meow-mode][MEOW MODE]]
- [[#god-mode][GOD MODE]]
- [[#general-keybindings][GENERAL (Keybindings)]]
- [[#mail][MAIL]]
- [[#languages][LANGUAGES]]
- [[#jumplist][JUMPLIST]]
- [[#tree-sitter][TREE SITTER]]
- [[#eglot][EGLOT]]
- [[#project][PROJECT]]
- [[#terminal][TERMINAL]]
- [[#completion][COMPLETION]]
- [[#extensibility][EXTENSIBILITY]]
- [[#file-default-modes][FILE DEFAULT MODES]]
- [[#ai][AI]]
- [[#keycaster][KEYCASTER]]
- [[#debugging][DEBUGGING]]
- [[#buffer-placements][BUFFER PLACEMENTS]]
- [[#terminals][TERMINALS]]
- [[#helpful][HELPFUL]]
- [[#dired][DIRED]]
- [[#formatters][FORMATTERS]]
- [[#padding][PADDING]]
- [[#final-fixes][FINAL FIXES]]
- [[#linux-system][LINUX SYSTEM]]
- [[#custom-function][CUSTOM FUNCTION]]

* UTILITES
#+begin_src emacs-lisp
    ;;; -*- lexical-binding:t; coding:utf-8 -*-
  ;; Base cache directory
  (setq inhibit-startup-message t)
  (setq-default line-spacing 0.05)
  (global-hl-line-mode 1)
  (setq cursor-type 'box) ;; bar or box
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq indent-line-function 'insert-tab)
  (custom-set-faces
   '(hl-line ((t (:background "#2c2c2c"))))) ;; Dark highlight
  (setq hl-line-sticky-flag nil)
  ;; (custom-set-faces
  ;;  '(hl-line ((t (:underline "white" :background nil)))))


  ;; Disable window decorations
  (menu-bar-mode -1)
  ;; (tool-bar-mode 0)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (add-hook 'after-make-frame-functions
    	      (lambda (frame)
    	        (modify-frame-parameters
    	         frame
    	         '((menu-bar-lines . 0)
    	           (tool-bar-lines . 0)
    	           (vertical-scroll-bars . nil)
    	           (horizontal-scroll-bars . nil)))))

  (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
  (add-to-list 'default-frame-alist '(horizontal-scroll-bars . nil))

  ;; Enable relative line numbers
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (require 'cl-lib)
  (add-hook 'emacs-startup-hook
    	      (lambda ()
    	        (message "*** Emacs loaded in %s seconds with %d garbage collections."
    		             (emacs-init-time "%.2f")
    		             gcs-done)))
  (recentf-mode 1)                       ;; Enable recent files
  (setq recentf-max-saved-items 200)    ;; Increase the number of saved files
  (setq recentf-auto-cleanup 'never)    ;; Disable automatic cleanup
  (setq recentf-exclude '("/tmp/" "/ssh:")) ;; Ignore temporary files
  ;; (defvar font-family "Aporetic Serif Mono")
  ;; (defvar font-family "Iosevka Comfy")
  ;;(defvar font-family "Pragmasevka Nerd Font")
  (defvar font-family "JetBrainsMono Nerd Font")
  ;;(defvar my-cache-dir
    ;;(expand-file-name "emacs/" (or (getenv "XDG_CACHE_HOME") "~/.cache"))
   ;; "Directory to store all Emacs cache and generated files.")
  (setq my-cache-dir
      (expand-file-name "elpa" 
                        (or (getenv "XDG_CACHE_HOME") 
                            "~/.cache/emacs/")))

  (unless (file-exists-p my-cache-dir)
    (make-directory my-cache-dir t))

  ;; Move various generated files:
  (setq
   ;; ELPA packages (optional if you use straight.el)
   package-user-dir (expand-file-name "elpa/" my-cache-dir)

   ;; Custom-file (so it doesn't pollute init.el)
   custom-file (expand-file-name "custom.el" my-cache-dir)

   ;; Auto-save and backups
   backup-directory-alist `(("." . ,(expand-file-name "backups/" my-cache-dir)))
   auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save/" my-cache-dir) t))
   auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" my-cache-dir)

   ;; URL cache
   url-history-file (expand-file-name "url/history" my-cache-dir)

   ;; Recentf
   recentf-save-file (expand-file-name "recentf" my-cache-dir)

   ;; Bookmarks
   bookmark-default-file (expand-file-name "bookmarks" my-cache-dir)

   project-list-file "~/.cache/emacs/projects"

   ;; Tramp
   tramp-persistency-file-name (expand-file-name "tramp" my-cache-dir)

   ;; Eshell history
   eshell-history-file-name (expand-file-name "eshell/history" my-cache-dir)

   ;; Savehist
   savehist-file (expand-file-name "savehist" my-cache-dir)

   ;; Projectile cache
   projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" my-cache-dir))


  (setq native-comp-eln-load-path (list (expand-file-name "eln-cache/" my-cache-dir)))
  (setq package-vc-dir (expand-file-name "vc/" my-cache-dir))
#+end_src

* PACKAGE MANAGEMENT

#+begin_src emacs-lisp
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/"))
  (setq package-user-dir (expand-file-name "~/.cache/elpa/"))
  (setq emacs-config-dir (expand-file-name "~/.config/emacs"))
  (add-to-list 'load-path (expand-file-name "lisp" emacs-config-dir))
  (require 'package)
  (setq package-archives '(
  			             ("elpa" . "https://elpa.gnu.org/packages/")
                 	         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
  			             ("melpa" . "https://melpa.org/packages/")
;;  			             ("org" . "https://orgmode.org/elpa/")
))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    ;; (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  ;; Enable saving minibuffer history
  (savehist-mode 1)
#+end_src

* UI CUSTOMIZATION

Install corfu nerd icons with =package-install nerd-icons-corfu=
#+begin_src emacs-lisp
  (use-package nerd-icons
    :demand t
    :ensure t ; This will ensure nerd-icons is installed))
    )
#+end_src

#+begin_src emacs-lisp
;; Disable welcome message

(pixel-scroll-precision-mode 1)

(use-package cherry-blossom-theme
  :ensure t)

(use-package doom-themes
  :ensure t
  :demand t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-ayu-dark t)
  (doom-themes-org-config)
  ) 

(use-package doom-modeline
  :ensure t
  :demand t
  :init
  (doom-modeline-mode 1)
  :config
  ;; Red background
  (defun set-red-mode-line ()
    "Set red mode line"
    (interactive)
    (custom-set-faces
     '(doom-modeline ((t (:background "#682A10" :foreground "#FEDBC1"))))
     '(mode-line ((t (:background "#682A10" :foreground "#FEDBC1"))))
     '(mode-line-inactive ((t (:background "#36312E" :foreground "#6B6564"))))))

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  ;; (set-frame-parameter nil 'internal-border-width 10)
#+end_src

* EMACS DEFAULT 
Essential emacs defaults
#+begin_src emacs-lisp
  (use-package ediff
    :config
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-keep-variants nil
          ediff-make-buffers-readonly-at-startup nil
          ediff-merge-revisions-with-ancestor t
          ediff-show-clashes-only t
          ))

  (use-package async
    :ensure t
    :after dired
    :init
    (dired-async-mode 1))

  (use-package savehist
    :defer 2
    :init
    ;; So I can always jump back to wear I left of yesterday
    (add-to-list 'savehist-additional-variables 'global-mark-ring)
    (add-to-list 'savehist-additional-variables 'kill-ring)
    (add-to-list 'savehist-additional-variables 'register-alist)
    (savehist-mode t)

    (global-auto-revert-mode 1))

  (use-package undo-fu-session ; Persistant undo history
    :ensure t
    :demand t
    :config (global-undo-fu-session-mode))

  (use-package wgrep :ensure t :after embark
    :bind
    (:map grep-mode-map
  	    ("C-x C-q" . wgrep-change-to-wgrep-mode)))

  (use-package emacs
    :ensure nil
    :demand t
    :config
    (blink-cursor-mode -1)
    (setq make-backup-files nil)
    (setq create-lockfiles nil)
    (setq custom-file (make-temp-file "emacs-custom-"))
    (require 'ffap)
     ;;;; UTF-8
    (prefer-coding-system 'utf-8)
     ;;;; Remove Extra Ui
    (setopt use-short-answers t) ; don't ask to spell out "yes"
    (setopt show-paren-context-when-offscreen 'overlay) ; Emacs 29
    (show-paren-mode 1)              ; Highlight parenthesis
    (setq-default frame-resize-pixelwise t)
    ;; Vim like scrolling
    (setq scroll-step            1
          scroll-conservatively  10000
          next-screen-context-lines 5
          ;; move by logical lines rather than visual lines (better for macros)
          line-move-visual nil)
    )

  (use-package eshell
    :commands eshell
    :config
    (setq eshell-destroy-buffer-when-process-dies t))
#+end_src

* WHICH-KEY

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (keymap-global-set "<f12>" #'which-key-show-major-mode)
    (keymap-global-set "C-x K" #'kill-current-buffer)
    (setq which-key-idle-delay 0.3 ;; Shorter delay for popup
          which-key-max-display-columns nil ;; Allow which-key to use full width
          which-key-min-display-lines 10 ;; Ensure enough lines for display
          which-key-sort-order 'which-key-key-order)
    (which-key-mode)) ;; Sort by key sequence
#+end_src

* FONT

#+begin_src emacs-lisp
;; Example: Load a theme (ensure it's installed, e.g., via M-x package-install)
;; (load-theme 'modus-vivendi-tinted t)

;; Example: Set font (replace with your preferred font and size)
(set-face-attribute 'default nil
  		            :font (format "%s-10.5:weight=extra-bold" font-family))

(set-face-attribute 'variable-pitch nil
  		            :font (format "%s-11:weight=extra-bold" font-family))

(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic
                    :weight 'normal)

(set-face-attribute 'font-lock-keyword-face nil
                    :weight 'extra-bold)

;; (set-face-attribute 'org-document-title nil
;;                     :family font-family
;;                     :height 1.8
;;                     :weight 'bold)

;; (add-to-list 'default-frame-alist `(font . ,(format "%s-11:weight=bold" font-family)))

;; (add-hook 'server-after-make-frame-hook
;;           (lambda ()
;;             (set-frame-font (format "%s-12:weight=bold" font-family) nil t)))
#+end_src

* MAGIT
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status) ; Binds C-x g to open the Magit status buffer
    :config
    (require 'magit-transient)

    ;; Optional: Configure how Magit opens new buffers
    ;; Display magit status in the current window if possible, or a new window
    ;; (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-vdiff)

    ;; Optional: Customize visual aspects
    (setq magit-section-highlight t) ; Highlight current section
    (setq magit-fill-log-message t) ; Auto-wrap log messages

    ;; Optional: If you use Forge for GitHub/GitLab integration
    ;; (use-package forge :ensure t :after magit))
    )
#+end_src

* ORG MODE

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :hook (org-mode . (lambda ()
                        (setq-local completion-at-point-functions
                                    (list #'cape-elisp-block
                                          #'cape-dabbrev
                                          #'cape-file
                                          #'cape-keyword))))
    :config
    (add-hook 'org-src-mode-hook 'corfu-mode)
    (setq org-directory "~/org")
    (setq org-M-Ret-may-split-line '((default . nil)))
    (setq org-insert-heading-respect-content t)
    (setq org-agenda-files (list org-directory))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"
                      "WAIT(w)" "|" "CANCELLED(c)")))
    (require 'org-tempo)
    (setq org-log-done 'time
          org-log-into-drawer t)
    (setq org-src-fontify-natively t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 0)
    )

  (use-package org-roam
    :ensure t
    :bind ((
    	      "C-c n i" . org-roam-node-insert)
    	     ("C-c n f" . org-roam-node-find)
    	     ("C-c n d" . org-roam-dailies-goto-today)
    	     ("C-c n t" . org-roam-dailies-goto-tomorrow)
    	     ("C-c n y" . org-roam-dailies-goto-yesterday)
    	     ("C-c n c" . org-roam-capture))
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/roam")
    :config
    (org-roam-setup))

  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-enable))

  (use-package org-modern
    :ensure t
    :after org
    :hook
    ((org-mode . org-modern-mode)
     (org-agenda-finalize . org-modern-agenda))
    :config
    (setq
     org-modern-star 'replace           ; prettier bullets
     org-hide-emphasis-markers t        ; hide *bold*/_italic_ markers
     org-pretty-entities t              ; nicer quotes & symbols
     org-modern-timestamp nil           ; disable timestamp prettify if misaligned
     org-ellipsis "…")
    )

  ;; Border TOP
  (defun set-border-mode-line ()
    "Set border modeline"
    (interactive)
    (custom-set-faces
     ;; Active modeline
     '(mode-line ((t (
    		            :background nil
    		            :foreground nil
    		            :overline "white"
    		            ))))
     ;; Inactive modeline
     '(mode-line-inactive ((t (:background nil
    					                     :foreground nil
    					                     :overline "white"
    					                     ))))
     ;; Apply to Doom modeline
     '(doom-modeline ((t (:inherit mode-line))))
     ))
  ;; (set-red-mode-line)
  )

  (use-package mixed-pitch
    :ensure t
    :hook
    ((org-mode . mixed-pitch-mode)))
#+end_src

* EVIL MODE

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-g-bindings t)
  (setq evil-want-C-w-delete t)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-want-abbrev-expand-on-insert-exit nil)
  (setq evil-respect-visual-line-mode nil)
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-scroll t)
  (setq evil-scroll-line-down t)
  ;; (setq evil-want-minibuffer t)
  (setq evil-scroll-line-up t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (evil-select-search-module 'evil-search-module 'evil-search)
  (evil-set-initial-state 'inferior-emacs-lisp-mode  'emacs)
  (evil-set-initial-state 'nrepl-mode  'insert)
  (evil-set-initial-state 'pylookup-mode  'emacs)
  (evil-set-initial-state 'comint-mode  'normal)
  (evil-set-initial-state 'shell-mode  'insert)
  (evil-set-initial-state 'git-commit-mode  'insert)
  (evil-set-initial-state 'git-rebase-mode  'emacs)
  (evil-set-initial-state 'term-mode  'emacs)
  (evil-set-initial-state 'vc-dir-mode  'emacs)
  (evil-set-initial-state 'help-mode  'emacs)
  (evil-set-initial-state 'helm-grep-mode  'emacs)
  (evil-set-initial-state 'grep-mode  'emacs)
  (evil-set-initial-state 'xref--xref-buffer-mode  'emacs)
  (evil-set-initial-state 'bc-menu-mode  'emacs)
  (evil-set-initial-state 'magit-branch-manager-mode  'emacs)
  (evil-set-initial-state 'rdictcc-buffer-mode  'emacs)
  (evil-set-initial-state 'dired-mode  'emacs)
  (evil-set-initial-state 'wdired-mode  'normal)
  (setq evil-visual-update-x-selection-p nil)
  (with-eval-after-load 'evil
    (evil-define-key 'normal org-mode-map
  	  (kbd "RET") #'org-open-at-point))

  (cl-callf2 delq 'evil-ex features)
  (with-eval-after-load 'evil-ex (require 'commands)))

;; (defun my-evil-bracket-range (count beg end 
;; 				                    type inclusive)
;;   "Select nearest matching bracket-like syntax: (), [], {} or <>."
;;   (let ((pairs '("()" "[]" "{}" "<>"))
;; 	    found range)
;;     (dolist (pr pairs)
;; 	  (condition-case nil
;; 	      (setq range
;; 		        (evil-select-paren
;; 		         (string-to-char pr) ; opening char
;; 		         (string-to-char (substring pr 1 2))
;; 		         beg end type count inclusive))
;; 	    (error nil))
;; 	  (when range
;; 	    ;; Choose smallest enclosing range
;; 	    (if found
;; 	        (when (< (- (cdr range) (car range))
;; 		             (- (cdr found) (car found)))
;; 		      (setq found range))
;; 	      (setq found range))))
;;     found))

(use-package evil-collection
  :after evil
  :preface
  (defvar +evil-collection-disabled-list
    '(anaconda-mode
  	  company
  	  elisp-mode
  	  dape-info-modules-mode
  	  dape-info-sources-mode
  	  dape-info-stack-mode
  	  dape-info-watch-mode
  	  dape-info-breakpoints-mode
  	  dape-info-threads-mode
  	  ert
  	  lispy))
  (defvar evil-collection-setup-minibuffer nil)
  (defvar evil-collection-want-unimpaired-p nil)
  (defvar evil-collection-want-find-usages-bindings-p nil)
  (defvar evil-collection-outline-enable-in-minor-mode-p nil)
  :ensure t
  :init
  (evil-set-undo-system 'undo-redo)
  (defvar evil-collection-key-blacklist '())
  (setq evil-collection-key-blacklist
        (append evil-collection-key-blacklist
                '("gd" "gf")
                '("gr" "gR")
                '("[" "]" "gz" "<escape>")))
  :config
  ;; (evil-define-text-object evil-any-bracket-inner (count &optional beg end type)
  ;;   "Inner any-bracket text object: ib."
  ;;   :extend-selection nil
  ;;   (my-evil-bracket-range count beg end type nil))
  ;; (evil-define-text-object evil-any-bracket-outer (count &optional beg end type)
  ;;   "Outer bracket text object: ab."
  ;;   :extend-selection t
  ;;   (my-evil-bracket-range count beg end type t))
  ;; ;; Rebind b to this generic ANY-BRACKET object
  ;; (define-key evil-inner-text-objects-map "b" #'evil-any-bracket-inner)
  ;; (define-key evil-outer-text-objects-map "b" #'evil-any-bracket-outer)

  ;; Now limit 'q' object to quotes only
  ;; (define-key evil-inner-text-objects-map "q" #'evil-inner-quote)
  ;; (define-key evil-outer-text-objects-map "q" #'evil-outer-quote)

  ;; Optional: unbind default block-delimiter 'B' from anyblock/stack
  ;; (define-key evil-inner-text-objects-map "B" nil)
  ;; (define-key evil-outer-text-objects-map "B" nil)
  (evil-collection-init))

;; Additional text objects
(use-package evil-textobj-entire
  :ensure t
  :config
(setq evil-want-change-word-to-end t)) 


(use-package evil-snipe
  :ensure t
  ;; :commands evil-snipe-local-mode evil-snipe-override-local-mode
  :init
  (setq evil-snipe-smart-case t
        evil-snipe-scope 'line
        evil-snipe-repeat-scope 'visible
        evil-snipe-char-fold t)
  :config
  (evil-snipe-mode))

(use-package evil-easymotion
  :ensure t
  :config
  (evilem-default-keybindings "gs")
  ;; Use evil-search backend, instead of isearch
  (evilem-make-motion evilem-motion-search-next #'evil-ex-search-next
                      :bind ((evil-ex-search-highlight-all nil)))
  (evilem-make-motion evilem-motion-search-previous #'evil-ex-search-previous
                      :bind ((evil-ex-search-highlight-all nil)))
  (evilem-make-motion evilem-motion-search-word-forward #'evil-ex-search-word-forward
                      :bind ((evil-ex-search-highlight-all nil)))
  (evilem-make-motion evilem-motion-search-word-backward #'evil-ex-search-word-backward
                      :bind ((evil-ex-search-highlight-all nil)))

  ;; Rebind scope of w/W/e/E/ge/gE evil-easymotion motions to the visible
  ;; buffer, rather than just the current line.
  (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
  (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
  (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
  (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
  (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
  (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
  (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
  (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible))

(use-package evil-embrace
  :ensure t
  :after evil-surround
  :commands embrace-add-pair embrace-add-pair-regexp
  :hook (LaTeX-mode . embrace-LaTeX-mode-hook)
  :hook (LaTeX-mode . +evil-embrace-latex-mode-hook-h)
  :hook (org-mode . embrace-org-mode-hook)
  :hook (ruby-mode . embrace-ruby-mode-hook)
  :hook (emacs-lisp-mode . embrace-emacs-lisp-mode-hook)
  :hook ((c++-mode c++-ts-mode rustic-mode csharp-mode java-mode swift-mode typescript-mode)
         . +evil-embrace-angle-bracket-modes-hook-h)
  :hook (scala-mode . +evil-embrace-scala-mode-hook-h)
  :init
  (with-eval-after-load evil-surround
    (evil-embrace-enable-evil-surround-integration))

  ;; HACK: This must be done ASAP, before embrace has a chance to
  ;;   buffer-localize `embrace--pairs-list' (which happens right after it calls
  ;;   `embrace--setup-defaults'), otherwise any new, global default pairs we
  ;;   define won't be in scope.
  (defadvice! +evil--embrace-init-escaped-pairs-a (&rest args)
              "Add escaped-sequence support to embrace."
              :after #'embrace--setup-defaults
              (embrace-add-pair-regexp ?\\ "\\[[{(]" "\\[]})]" #'+evil--embrace-escaped
                         		       (embrace-build-help "\\?" "\\?")))
  :config
  (setq evil-embrace-show-help-p nil)

  (defun +evil-embrace-scala-mode-hook-h ()
    (embrace-add-pair ?$ "${" "}"))

  (defun +evil-embrace-latex-mode-hook-h ()
    (dolist (pair '((?\' . ("`" . "\'"))
                    (?\" . ("``" . "\'\'"))))
      (delete (car pair) evil-embrace-evil-surround-keys)
      ;; Avoid `embrace-add-pair' because it would overwrite the default
      ;; rules, which we want for other modes
      (push (cons (car pair) (make-embrace-pair-struct
                              :key (car pair)
                              :left (cadr pair)
                              :right (cddr pair)
                              :left-regexp (regexp-quote (cadr pair))
                              :right-regexp (regexp-quote (cddr pair))))
            embrace--pairs-list))
    (embrace-add-pair-regexp ?l "\\[a-z]+{" "}" #'+evil--embrace-latex))

  (defun +evil-embrace-angle-bracket-modes-hook-h ()
    (let ((var (make-local-variable 'evil-embrace-evil-surround-keys)))
      (set var (delq ?< evil-embrace-evil-surround-keys))
      (set var (delq ?> evil-embrace-evil-surround-keys)))
    (embrace-add-pair-regexp ?< "\\_<[a-z0-9-_]+<" ">" #'+evil--embrace-angle-brackets)
    (embrace-add-pair ?> "<" ">")))

(use-package evil-commentary
  :ensure t
  :after evil
  :config
  (evil-commentary-mode))

(use-package evil-surround
  :ensure t
  :commands (global-evil-surround-mode
             evil-surround-edit
             evil-Surround-edit
             evil-surround-region)
  :config (global-evil-surround-mode 1))

(use-package evil-textobj-tree-sitter
  :ensure t
  :config
  (define-key evil-outer-text-objects-map "f"
              (evil-textobj-tree-sitter-get-textobj "function.outer"))
  (define-key evil-inner-text-objects-map "f"
              (evil-textobj-tree-sitter-get-textobj "function.inner"))
  (define-key evil-outer-text-objects-map "C"
              (evil-textobj-tree-sitter-get-textobj "class.outer"))
  (define-key evil-inner-text-objects-map "C"
        	  (evil-textobj-tree-sitter-get-textobj "class.inner"))
  )

(use-package evil-textobj-anyblock
  :defer t
  :ensure t
  :config
  (setq evil-textobj-anyblock-blocks
        '(("(" . ")")
          ("{" . "}")
          ("'" . "'")
          ("\"" . "\"")
          ("`" . "`")
          ("\\[" . "\\]")
          ("<" . ">"))))

(use-package evil-visualstar
  :ensure t
  :commands (evil-visualstar/begin-search
        	 evil-visualstar/begin-search-forward
        	 evil-visualstar/begin-search-backward)
  :init
  (evil-define-key* 'visual 'global
    "*" #'evil-visualstar/begin-search-forward
    "#" #'evil-visualstar/begin-search-backward))

(use-package exato
  :ensure t
  :commands evil-outer-xml-attr evil-inner-xml-attr)

#+end_src

* MEOW MODE
#+begin_src emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (use-package meow
    :ensure t
    :config
    (meow-setup)
    ;;(meow-global-mode 1)
    )
#+end_src

* GOD MODE
#+begin_src emacs-lisp
  ;; (use-package god-mode
  ;;   :ensure t
  ;;   :init
  ;;   (setq god-mode-enable-function-key-translation nil)
  ;;   :config
  ;;   (require 'god-mode-isearch)
  ;;   (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
  ;;   (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)
  ;;   (define-key god-local-mode-map (kbd "i") #'god-local-mode)
  ;;   (define-key god-local-mode-map (kbd "f") #'forward-word)
  ;;   (define-key god-local-mode-map (kbd "b") #'backward-word)
  ;;   (define-key god-local-mode-map (kbd ".") #'repeat)
  ;;   (global-set-key (kbd "<escape>") #'(lambda () (interactive) (god-local-mode 1)))
  ;;   (setq god-exempt-major-modes nil)
  ;;   (setq god-exempt-predicates nil)
  ;;   (defun my-god-mode-update-cursor-type ()
  ;;     (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))
  ;;   (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
  ;;   (god-mode))
#+end_src

* GENERAL (Keybindings)

#+begin_src emacs-lisp
(defun move-text-up ()
  "Move current line or region up."
  (interactive)
  (if (region-active-p)
      (let ((text (buffer-substring (region-beginning) (region-end))))
    	(delete-region (region-beginning) (region-end))
    	(forward-line -1)
    	(insert text))
    (let ((col (current-column)))
      (transpose-lines 1)
      (forward-line -2)
      (move-to-column col))))

(defun move-text-down ()
  "Move current line or region down."
  (interactive)
  (if (region-active-p)
      (let ((text (buffer-substring (region-beginning) (region-end))))
    	(delete-region (region-beginning) (region-end))
    	(forward-line 1)
    	(insert text))
    (let ((col (current-column)))
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)
      (move-to-column col))))


(defun my/switch-to-previous-buffer ()
  "Switch to the previous buffer."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "M-[") 'previous-buffer)
(global-set-key (kbd "C-^") 'my/switch-to-previous-buffer)


(use-package general
  :ensure t
  :after evil				
  :config
  (general-auto-unbind-keys)
  (general-evil-setup t)

  ;; Set leader key
  (general-create-definer my/leader-keys
    ;; :keymaps 'evil-normal-state-map
    :prefix "C-c"
    :global-prefix "C-c"
    :non-normal-prefix "C-c") ;; Optional: a global prefix for non-evil modes

  (my/leader-keys
    :states '(normal visual motion)
    :prefix "<SPC>"
    "a" '(:ignore t :which-key "AI")
    "a a" '(gptel :which-key "Gptel")
    "a m" '(gptel-menu :which-key "Gptel Menu")
    )

  (defun toggle-evil-mode ()
    "Toggle evil mode between enabled and disabled"
    (interactive)
    (if evil-mode
        (evil-mode -1)
      (evil-mode 1)))

  
  (my/leader-keys
    ;; :states '(normal visual motion emacs)
    ;; :prefix "<SPC>"
    "d" '(:ignore t :which-key "Debugger")
    "d i" #'dape-info
    "d d" #'dape
    "d n" #'dape-next
    "d r" #'dape-restart
    "d R" #'dape-repl
    "d c" #'dape-continue
    "d o" #'dape-step-out
    "d s" #'dape-step-in
    "d q" #'dape-quit
    "d p" #'dape-pause
    "d w" #'dape-watch-dwim
    "d b" #'dape-breakpoint-toggle
    "d B" #'dape-breakpoint-remove-all
    "d e" #'dape-breakpoint-expression
    "d x" #'dape-evaluate-expression
    )

  (my/leader-keys
    :states '(normal visual motion)
    :prefix "<SPC>"
    "d" '(:ignore t :which-key "Debugger")
    "d i" #'dape-info
    "d d" #'dape
    "d n" #'dape-next
    "d r" #'dape-restart
    "d R" #'dape-repl
    "d c" #'dape-continue
    "d o" #'dape-step-out
    "d s" #'dape-step-in
    "d q" #'dape-quit
    "d p" #'dape-pause
    "d w" #'dape-watch-dwim
    "d b" #'dape-breakpoint-toggle
    "d B" #'dape-breakpoint-remove-all
    "d e" #'dape-breakpoint-expression
    "d x" #'dape-evaluate-expression
    )

  (general-define-key
   :states '(normal visual)
   :prefix "]"
   "b" 'next-buffer
   "B" 'end-of-buffer
   "e" 'move-text-down
   ;; "f" 'next-file
   "l" 'next-error
   "L" 'flycheck-next-error
   "q" 'flymake-goto-next-error
   "Q" 'flycheck-next-error
   ;; "s" 'flyspell-goto-next-error
   "t" 'tab-next
   "T" 'tab-move-right
   "w" 'next-multiframe-window
   "n" 'git-gutter:next-hunk
   "c" 'diff-hl-next-hunk
   "p" 'git-gutter:next-hunk
   "m" 'flymake-goto-next-error
   "d" 'lsp-ui-flycheck-list
   "a" 'forward-list
   "x" 'toggle-truncate-lines)

  
  (general-define-key
   :states '(normal visual)
   :prefix "["
   "b" 'previous-buffer
   "B" 'end-of-buffer
   "e" 'move-text-down
   ;; "f" 'previous-file
   "l" 'previous-error
   "L" 'flycheck-previous-error
   "q" 'flymake-goto-previous-error
   "Q" 'flycheck-previous-error
   ;; "s" 'flyspell-goto-previous-error
   "t" 'tab-previous
   "T" 'tab-move-right
   "w" 'previous-multiframe-window
   "n" 'git-gutter:previous-hunk
   "c" 'diff-hl-previous-hunk
   "p" 'git-gutter:previous-hunk
   "m" 'flymake-goto-previous-error
   "d" 'lsp-ui-flycheck-list
   "a" 'forward-list
   "x" 'toggle-truncate-lines)

  (general-define-key
   :states '(normal visual)
   :prefix "<SPC> T"
   "c" 'column-number-mode
   "h" 'hl-line-mode
   "i" 'aggressive-indent-mode
   "l" 'toggle-truncate-lines
   "n" 'display-line-numbers-mode
   "r" 'rainbow-mode
   "s" 'flyspell-mode
   "w" 'whitespace-mode
   "x" 'toggle-debug-on-error
   "v" 'visible-mode
   "t" 'toggle-theme
   "f" 'auto-fill-mode
   "g" 'git-gutter-mode
   "d" 'toggle-debug-on-error
   "p" 'smartparens-mode
   "a" 'abbrev-mode
   "o" 'org-mode
   "m" 'menu-bar-mode
   "b" 'tool-bar-mode)

  (general-define-key
   :states '(normal visual)
   "]p" (lambda () (interactive) (evil-paste-after 1) (evil-indent (evil-get-marker ?\[) (evil-get-marker ?\])))
   "[p" (lambda () (interactive) (evil-paste-before 1) (evil-indent (evil-get-marker ?\[) (evil-get-marker ?\])))
   "]P" (lambda () (interactive) (evil-paste-after 1))
   "[P" (lambda () (interactive) (evil-paste-before 1)))

  ;; Space and blank line operations
  (general-define-key
   :states '(normal visual)
   "]<space>" (lambda () (interactive) (save-excursion (end-of-line) (newline)))
   "[<space>" (lambda () (interactive) (save-excursion (beginning-of-line) (newline) (forward-line -1))))

  ;; (general-define-key
  ;;  :states '(normal visual)
  ;;  :prefix "["
  ;;  "b" 'previous-buffer
  ;;  "B" 'beginning-of-buffer
  ;;  "e" 'move-text-up
  ;;  ;; "f" 'previous-file
  ;;  "l" 'previous-error
  ;;  "L" 'flycheck-previous-error
  ;;  "q" 'previous-error
  ;;  "Q" 'flycheck-previous-error
  ;;  ;; "s" 'flyspell-goto-previous-error
  ;;  "t" 'tab-previous
  ;;  "T" 'tab-move-left
  ;;  "w" 'previous-multiframe-window
  ;;  "n" 'git-gutter:previous-hunk
  ;;  "c" 'diff-hl-previous-hunk
  ;;  "p" 'git-gutter:previous-hunk
  ;;  "m" 'flymake-goto-prev-error
  ;;  "d" 'lsp-ui-flycheck-list
  ;;  "a" 'backward-list
  ;;  "x" 'toggle-truncate-lines)

  (my/leader-keys
    :states '(normal visual visual motion)
    :prefix "<SPC>"
    "f" '(:ignore t :which-key "Find")
    "f f" 'find-file
    "SPC" 'project-find-file
    "." 'toggle-evil-mode
    "f b" 'consult-buffer
    "s" '(:ignore t :which-key "Search")
    "s D" 'consult-flymake
    "s d" 'flymake-show-project-diagnostics
    "s g" 'consult-grep
    "f p" 'project-find-file
    "f r" 'consult-recent-file)

  
  (my/leader-keys
    "f" '(:ignore t :which-key "Find")
    "f f" 'find-file
    "SPC" 'project-find-file
    "." 'toggle-evil-mode
    "f b" 'consult-buffer
    "s" '(:ignore t :which-key "Search")
    "s D" 'consult-flymake
    "s d" 'flymake-show-project-diagnostics
    "s g" 'consult-grep
    "f p" 'project-find-file
    "f r" 'consult-recent-file)

  (my/leader-keys
    ;; :states '(normal visual motion emacs)
    ;; :prefix "<SPC>"
    "b" '(:ignore t :which-key "Buffers")
    "b p" '(consult-project-buffer :which-key "Project buffers")
    "b i" 'ibuffer)

  (my/leader-keys
    :states '(normal visual motion)
    :prefix "<SPC>"
    "b" '(:ignore t :which-key "Buffers")
    "b p" '(consult-project-buffer :which-key "Project buffers")
    "b i" 'ibuffer)

  (my/leader-keys
    :states '(normal visual motion)
    :prefix "<SPC>"
    "o" '(:ignore t :which-key "Org")
    "o a" '(org-agenda :which-key "Org agenda"))

  (my/leader-keys
    ;; :states '(normal visual motion emacs)
    ;; :prefix "<SPC>"
    "o" '(:ignore t :which-key "Org")
    "o a" '(org-agenda :which-key "Org agenda"))

  
  (my/leader-keys
    :states '(normal visual motion)
    :prefix "<SPC>"
    "p" '(:ignore t :which-key "Projects")
    "p s" 'project-switch-project
    "p f" 'project-find-file
    "p b" 'consult-project-buffer
    "p d" 'project-dired
    "p g" 'project-search
    "p r" 'project-query-replace-regexp
    "p c" 'project-compile
    "p t" 'projectile-test-project
    "p k" 'project-kill-buffers
    "p D" 'project-remember-projects-under)

  (my/leader-keys
    ;; :states '(normal visual motion emacs)
    ;; :prefix "<SPC>"
    "p" '(:ignore t :which-key "Projects")
    "p s" 'project-switch-project
    "p f" 'project-find-file
    "p b" 'consult-project-buffer
    "p d" 'project-dired
    "p g" 'project-search
    "p r" 'project-query-replace-regexp
    "p c" 'project-compile
    "p t" 'projectile-test-project
    "p k" 'project-kill-buffers
    "p D" 'project-remember-projects-under)

  
  (general-define-key
   :states '(normal visual motion emacs)
   :override t
   :modes '(dape-info-modules-mode
    	    dape-info-sources-mode
    	    dape-info-stack-mode
    	    dape-info-watch-mode
    	    dape-info-breakpoints-mode
    	    dape-info-threads-mode)
   :priority 10000
   ;; :keymaps '(dape-info-modules-mode
   ;; 	dape-info-sources-mode
   ;; 	dape-info-stack-mode
   ;; 	dape-info-watch-mode
   ;; 	dape-info-breakpoints-mode
   ;; 	dape-info-threads-mode)
   "<tab>" #'dape--info-buffer-tab)
  
  (my/leader-keys
    :states '(normal visual motion)
    :prefix "g"
    "O" 'consult-imenu
    "S" 'consult-eglot-symbols
    "r n" 'eglot-rename
    "r a" 'eglot-code-actions
    "r f" 'eglot-format
    "r i" 'eglot-find-implementation
    "r r" 'xref-find-references
    "r t" 'eglot-find-declaration)

  (my/leader-keys
    ;; :states '(normal visual motion)
    :prefix "C-c l"
    :global-prefix "C-c l"
    :non-normal-prefix "C-c l"
    "n" 'eglot-rename
    "a" 'eglot-code-actions
    "f" 'eglot-format
    "i" 'eglot-find-implementation
    "r" 'xref-find-references
    "t" 'eglot-find-declaration)

  (my/leader-keys
    :prefix "C-c c"
    :global-prefix "C-c c"
    :non-normal-prefix "C-c c"
    ;;:states '(normal visual motion)
    "O" 'consult-imenu
    "S" 'consult-eglot-symbols
    "r a" 'eglot-code-actions
    "r n" 'eglot-rename
    "r r" 'eglot-find-references
    "r t" 'eglot-find-typeDefinition
    "c c" 'evil-commentary)

  (general-create-definer my/flutter-leader
    :states '(normal visual)
    :keymaps 'dart-mode-map
    :prefix "C-c m"
    :global-prefix "C-c m"
    :non-normal-prefix "C-c m")

  (my/flutter-leader
    "f r" #'flutter-run-or-hot-reload
    "f R" #'flutter-hot-restart)

  ;; Reload config
  (general-create-definer my/config-keys
    ;;:keymaps 'evil-normal-state-map
    ;; :prefix "h"
    ;; :global-prefix "C-c h"
    ;; :non-normal-prefix "C-c h"
    :states '(normal emacs))

  (my/leader-keys
    ;; :states '(normal visual motion emacs)
    :prefix "C-c"
    "h r r" (lambda ()
              (interactive)
              (let* ((org-file (expand-file-name "config.org" emacs-config-dir))
                     (el-file "~/.cache/emacs/config.el"))
                ;; Ensure cache directory exists
                (make-directory (file-name-directory el-file) t)
                
                ;; Tangle if needed (org newer than el, or el doesn't exist)
                (when (or (not (file-exists-p el-file))
                          (file-newer-than-file-p org-file el-file))
                  (org-babel-tangle-file org-file))
                
                ;; Load the tangled file from cache directory
                (load el-file)))
    :which-key "Reload Config"
    "h c" (lambda ()
            (interactive)
            (find-file (expand-file-name "config.org" user-emacs-directory)))
    :which-key "Open Config"
    "h l" 'check-parens))
#+end_src

* MAIL
#+begin_src emacs-lisp
  (use-package mu4e
    :if (locate-library "mu4e")
    :config
    ;; Basic settings
    (setq mu4e-maildir "~/Maildir")
    (setq mu4e-get-mail-command "mbsync -a")  ; or "offlineimap"
    
    ;; Simple folder setup
    (setq mu4e-drafts-folder "/Drafts")
    (setq mu4e-sent-folder   "/Sent")
    (setq mu4e-trash-folder  "/Bin")
    
    ;; Don't save to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)
    
    ;; Simple view
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses t))
#+end_src

* LANGUAGES

Dart mode

#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)  ; No delay
  (setq show-paren-style 'mixed)  ; Highlight brackets and expression
  (defun enable-font-lock-mode ()
    (global-font-lock-mode 1)
    ;;(corfu-mode 1)
    (apheleia-mode 1)
    (display-line-numbers-mode 1))

  (use-package typescript-mode
    :ensure t)

  (use-package dart-mode
    :ensure t
    :hook (dart-mode . eglot-ensure)
    :config
    (load "ez-flutter")
    (require 'ez-flutter))

  (use-package flutter
    :ensure t
    :after dart-mode)
#+end_src

Markdown Mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode)
    :config
    (setq markdown-fontify-code-blocks-natively t))

  (defun my/eglot-render-markdown ()
    "Format Eglot's *eglot-help* buffer using markdown-mode."
    (when (string= (buffer-name) "*eglot-help*")
      (markdown-view-mode) ;; Read-only rendered view
      ;; Optional: enable visual enhancements
      (visual-line-mode 1)
      (setq-local shr-use-fonts t)))

  (add-hook 'help-mode-hook #'my/eglot-render-markdown)
  (setq markdown-fontify-code-blocks-natively t)
#+end_src

* JUMPLIST

#+begin_src emacs-lisp
  (use-package better-jumper
    :ensure t
    :bind (("C-i" . better-jumper-jump-forward)
           ("C-o" . better-jumper-jump-backward))
    :config
    (better-jumper-mode +1))
#+end_src

* TREE SITTER

#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :after treesit
    :ensure t)

  (use-package treesit
    :ensure nil
    :init
    (setq treesit-language-source-alist
  	    '((templ "https://github.com/vrischmann/tree-sitter-templ")
  	      (bash "https://github.com/tree-sitter/tree-sitter-bash")
  	      (cmake "https://github.com/uyha/tree-sitter-cmake")
            (c "https://github.com/tree-sitter/tree-sitter-c")
  	      (css "https://github.com/tree-sitter/tree-sitter-css")
            (dart "https://github.com/UserNobody14/tree-sitter-dart")
  	      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
  	      (go "https://github.com/tree-sitter/tree-sitter-go")
  	      (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
  	      (html "https://github.com/tree-sitter/tree-sitter-html")
  	      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
  	      (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
  	      (json "https://github.com/tree-sitter/tree-sitter-json")
  	      (make "https://github.com/alemuller/tree-sitter-make")
  	      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
  	      (python "https://github.com/tree-sitter/tree-sitter-python")
            (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
  	      (toml "https://github.com/tree-sitter/tree-sitter-toml")
  	      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
  	      (typescript "https://github.com/tree-sitter/tree-sitter-typescript"
  		              "master" "typescript/src")
  	      (yaml "https://github.com/ikatyang/tree-sitter-yaml")
  	      (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
  	      (typst "https://github.com/uben0/tree-sitter-typst")
  	      (java "https://github.com/tree-sitter/tree-sitter-java")
  	      (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
  	      (rust "https://github.com/tree-sitter/tree-sitter-rust")
  	      (zig "https://github.com/tree-sitter-grammars/tree-sitter-zig")
  	      (cpp "https://github.com/tree-sitter/tree-sitter-cpp")))
    (setq major-mode-remap-alist
  	    '((bash-mode . bash-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (css-mode . css-ts-mode)
            (js-mode . js-ts-mode)
            (json-mode . json-ts-mode)
            (python-mode . python-ts-mode)
            (ruby-mode . ruby-ts-mode)
            (typescript-mode . typescript-ts-mode)))
    (setopt treesit-font-lock-level 4)
    (global-tree-sitter-mode)
    (add-hook 'prog-mode-hook #'tree-sitter-hl-mode)
    (add-hook 'prog-mode-hook #'enable-font-lock-mode)
    )
#+end_src

* EGLOT

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook ((prog-mode . eglot-ensure))
    :config
    (setq eglot-inlay-hints-mode nil)
    (setq completion-at-point-functions '(eglot-completion-at-point)))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  ;; (with-eval-after-load 'eglot
  ;; (add-to-list 'eglot-server-programs
  ;;              '(dart-mode . ("dart" "language-server" "--protocol=lsp")))
  ;; (add-to-list 'eglot-server-programs
  ;;              '(typescript-ts-mode . ("typescript-language-server" "--stdio"))))

#+end_src

* PROJECT

#+begin_src emacs-lisp
  ;; (use-package projectile
  ;; 	:ensure t
  ;; 	:config
  ;; 	(projectile-mode +1)
  ;; 	(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  ;; 	(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  ;; (use-package ibuffer-projectile
  ;; 	:ensure t)
  (use-package project
    :config
    (add-to-list 'project-vc-extra-root-markers ".jj"))


  (use-package ibuffer
    :ensure nil
    ;; :bind (("C-x C-b" . ibuffer)) ;; Replace buffer list
    :config
    (setq ibuffer-show-empty-filter-groups nil)) ;; Hide empty groups

  (use-package ibuffer-project
    :ensure t
    :hook (ibuffer . (lambda ()
  			         (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
                       (unless (eq ibuffer-sorting-mode 'project-file-relative)
                         (ibuffer-do-sort-by-project-file-relative)))))

  ;; Add hook to group buffers by project when opening ibuffer
  ;; (add-hook 'ibuffer-hook
  ;; 		(lambda ()
  ;; 		(ibuffer-projectile-set-filter-groups)
  ;; 		(unless (eq ibuffer-sorting-mode 'alphabetic)
  ;; 		    (ibuffer-do-sort-by-alphabetic)))))


#+end_src

* TERMINAL
#+begin_src emacs-lisp
  (use-package eat
    :ensure t)
#+end_src

* COMPLETION

    #+begin_src emacs-lisp
      (use-package vertico
        :ensure t
        :config
        (vertico-mode)
        ;; Enable cycling through candidates with M-n / M-p
        (setq vertico-cycle t)
        ;; Automatically resize minibuffer based on candidates
        (setq vertico-resize t)
        (setq minibuffer-prompt-properties
              '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
        ;; Enable recursive minibuffers
        (setq enable-recursive-minibuffers t)
        (minibuffer-depth-indicate-mode 1))

      (use-package eldoc-box
        :ensure t
        ;; :after evil
        :bind (
               ("M-n" . eldoc-box-scroll-up)
               ("M-p" . eldoc-box-scroll-down)
               (:map evil-normal-state-map
                     ("K" . eldoc-box-help-at-point)) ; Show help at point
               )
        ;; :hook (eldoc-mode . eldoc-box-hover-mode)
        ;; :custom
        :config
        (setq eldoc-echo-area-use-multiline-p nil) ;; don't expand
        ;; (setq eldoc-message-function #'ignore)    ;; Do not display in minibuffer
        ;; (eldoc-box-max-pixel-height 200)
        )

      (with-eval-after-load 'evil
        (evil-define-key* 'normal 'global
          (kbd "C-c k") #'eldoc-box-help-at-point)) ;;

      (use-package corfu
        :ensure t
        :init
        (global-corfu-mode)
        (corfu-history-mode)
        :config
        (setq corfu-auto t        ;; Enable auto-completion
              corfu-auto-delay 0.1
              corfu-auto-prefix 1
              corfu-border-width 4
              corfu-popupinfo-mode 1
              corfu-cycle t)
        (defun my-elisp-setup ()
          "Enable Eldoc and Corfu in Emacs Lisp buffers."
          (eldoc-mode 1)     ;; Inline documentation
          (corfu-mode 1))    ;; Popup completion UI

        (add-hook 'emacs-lisp-mode-hook #'my-elisp-setup)

        (defun my-org-src-setup ()
          "Enable Eldoc and Corfu in Org src edit buffers."
          (when (derived-mode-p 'emacs-lisp-mode)
            (my-elisp-setup)))

        (add-hook 'org-src-mode-hook #'my-org-src-setup)

        (defun my-org-eldoc-in-src-block ()
          "Provide Eldoc support for Elisp inside Org src blocks."
          (when (org-in-src-block-p '("emacs-lisp"))
            (let* ((context (thing-at-point 'symbol t))
                   (sym (and context (intern-soft context))))
              (cond
               ((and sym (fboundp sym))
                ;; Function: Show its args
                (elisp-get-fnsym-args-string sym))
               ((and sym (boundp sym))
                ;; Variable: Show its docstring
                (elisp-get-var-docstring sym))))))

        (defun my-org-enable-inline-eldoc ()
          "Enable inline Eldoc in Org mode for Elisp blocks."
          (setq-local eldoc-documentation-function #'my-org-eldoc-in-src-block)
          (eldoc-mode 1))

        (add-hook 'org-mode-hook #'my-org-enable-inline-eldoc)
        ;; (custom-set-faces
        ;;  '(corfu-default ((t (:background "#1e1e2e" :foreground "#f8f8f2" :family font-family :color "#1e1e2e" :style nil))))
        ;;  '(corfu-border ((t (:background "#ffffff")))))
        )

      (defun mark-line ()
        "Mark whole line"
        (interactive)
        (beginning-of-line)
        (set-mark-command nil)
        (end-of-line)
        )

      (defun toggle-evil-mode ()
        "Toggle evil mode"
        (interactive)
        (if evil-mode
            (progn ()
                   (evil-mode -1)
                   (message "Evil mode disabled"))
          (evil-mode 1)
          (message "Evil mode enabled")
          ))

      (with-eval-after-load 'corfu
        ;; Corfu-specific bindings - these should remain in corfu-map
        ;; (global-set-key (kbd "M-n") #'corfu-next)
        ;; (global-set-key (kbd "M-p") #'corfu-previous))

        ;; Global keybindings (available in all modes)
        (global-set-key (kbd "C-n") #'next-line)
        (global-set-key (kbd "<f9>") #'toggle-evil-mode)
        (global-set-key (kbd "C-p") #'previous-line)
        (global-set-key (kbd "C-v") #'scroll-up-command)
        (global-set-key (kbd "M-o") #'mark-line)
        )


      (use-package nerd-icons-corfu
        :ensure t ; This will ensure nerd-icons is installed
        :after nerd-icons
        :after corfu
        :config
        (when (display-graphic-p) ; Only load if graphical (nerd-icons are visual)
          ;; (nerd-icons-install-fonts) ; Install the fonts if you haven't already
          (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
        )

      (use-package cape
        :ensure t
        :config
        (add-to-list 'completion-at-point-functions #'cape-dabbrev)
        ;; (add-to-list 'completion-at-point-functions #'cape-file)
        (add-to-list 'completion-at-point-functions #'cape-elisp-block)
        (add-to-list 'completion-at-point-functions #'cape-history)
        (add-to-list 'completion-at-point-functions #'cape-keyword)
        (add-to-list 'completion-at-point-functions #'cape-tex)
        (add-to-list 'completion-at-point-functions #'cape-sgml)
        (add-to-list 'completion-at-point-functions #'cape-rfc1345)
        (add-to-list 'completion-at-point-functions #'cape-abbrev)
        (add-to-list 'completion-at-point-functions #'cape-dict)
        (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

        ;; Ensure that pcomplete does not write to the buffer
        (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
        )

      (use-package corfu-popupinfo
        :after corfu
        :hook ((corfu-mode . corfu-popupinfo-mode))
        :config
        (setq corfu-popupinfo-delay '(0.5 . 1.0)))


      (use-package popon
        :vc (:url "https://codeberg.org/akib/emacs-popon.git"
                  :branch "master")
        :after corfu)

      (use-package corfu-terminal
        :vc (:url "https://codeberg.org/akib/emacs-corfu-terminal.git"
                  :branch "master")
        :after corfu
        :config
        (unless (display-graphic-p)
          (corfu-terminal-mode)))

      (use-package yasnippet
        :ensure t
        :init
        (yas-global-mode 1)
        :config
        (setq eglot-extend-to-xref t)
        (setq eglot-enable-snippet t)
        (defun corfu-maybe-expand-snippet ()
          (when (and (bound-and-true-p yas-minor-mode)
                     (yas-expand))))
        (advice-add 'corfu-insert :after #'corfu-maybe-expand-snippet)
        )

      (use-package yasnippet-snippets
        :defer t
        :after yasnippet)

      (use-package marginalia
        :ensure t
        :bind (("M-A" . marginalia-cycle)
               :map minibuffer-local-map
               ("M-A" . marginalia-cycle))
        :custom
        (marginalia-max-relative-age 0)  ; Show absolute timestamps
        (marginalia-align 'right)        ;
        :init
        (marginalia-mode))

      (use-package consult
        :ensure t
        ;; :bind (
        ;;        ("C-s" . consult-line)		
        ;;  )
        :config
        (recentf-mode t)
        )

      (use-package consult-eglot
        :ensure t
        :after (eglot consult)
        :commands consult-eglot-symbols)


      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles basic partial-completion))))
        (orderless-matching-styles '(orderless-literal orderless-regexp orderless-flex))
        :config
        ;; Recognize more characters as word boundaries
        (setq orderless-component-separator #'orderless-escapable-split-on-space))

      (use-package embark
        :ensure t
        :bind
        (("C-=" . embark-act)
         ("C--" . embark-dwim)
         ("C-h B" . embark-bindings)))

      (use-package embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src

* EXTENSIBILITY
    This configuration is designed to be extensible. You can add new packages and configurations by creating new sections in this file. For example, to add a new package, you can create a new heading and add a ~use-package~ block.

    You can also create a directory for custom lisp files.

    #+begin_src emacs-lisp
    #+end_src

* FILE DEFAULT MODES

Set the commands to run for eglot
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    ;; Remove legacy tsserver if desired
    ;; (setq eglot-server-programs
    ;;       (assq-delete-all 'typescript-ts-mode eglot-server-programs))

    (dolist (m '(typescript-ts-mode tsx-ts-mode js-ts-mode typescript-mode))
      (add-to-list 'eglot-server-programs
  		 `(,m .
  		      ("vtsls" "--stdio"))))
    
    (setq-default eglot-workspace-configuration
              '((vtsls
                 . ((completeFunctionCalls . t)
                    (typescript . ((updateImportsOnFileMove . ((enabled . "always")))
                                   (suggest . ((completeFunctionCalls . t)))
                                   (inlayHints . ((parameterNames . ((enabled . "literals")
                                                                     (suppressWhenArgumentMatchesName . nil)))
                                                  (parameterTypes . ((enabled . t)))
                                                  (variableTypes . ((enabled . nil)))
                                                  (propertyDeclarationTypes . ((enabled . t)))
                                                  (functionLikeReturnTypes . ((enabled . t)))
                                                  (enumMemberValues . ((enabled . t)))))
                                   ;; Add formatting preferences here
                                   (format . ((insertSpaceAfterCommaDelimiter . t)
                                             (insertSpaceAfterConstructor . t)
                                             (insertSpaceAfterSemicolonInForStatements . t)
                                             (insertSpaceBeforeAndAfterBinaryOperators . t)
                                             (insertSpaceAfterKeywordsInControlFlowStatements . t)
                                             (insertSpaceAfterFunctionKeywordForAnonymousFunctions . t)
                                             (insertSpaceBeforeFunctionParenthesis . nil)
                                             (insertSpaceAfterOpeningAndBeforeClosingNonemptyParentheses . nil)
                                             (insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets . nil)
                                             (insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces . nil)
                                             (placeOpenBraceOnNewLineForFunctions . nil)
                                             (placeOpenBraceOnNewLineForControlBlocks . nil)
                                             (indentSize . 4)
                                             (tabSize . 4)
                                             (convertTabsToSpaces . t)))
                                   ;; Add preferences for indentation
                                   (preferences . ((indentSize . 4)
                                                  (tabSize . 4)
                                                  (convertTabsToSpaces . t)
                                                  (insertSpaceAfterCommaDelimiter . t)
                                                  (insertSpaceAfterSemicolonInForStatements . t)
                                                  (insertSpaceBeforeAndAfterBinaryOperators . t)
                                                  (insertSpaceAfterKeywordsInControlFlowStatements . t))))))))))
#+end_src

Set filetype modes

  #+begin_src emacs-lisp
    ;; No external package needed — this mode exists in Emacs core

    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . tsx-ts-mode))
#+end_src

Also set the eglot auto start
#+begin_src emacs-lisp
(add-hook 'typescript-mode-hook #'eglot-ensure)
(add-hook 'typescript-ts-mode-hook #'eglot-ensure)
(add-hook 'js-ts-mode-hook #'eglot-ensure)
#+end_src

* AI

#+begin_src emacs-lisp
  (use-package copilot
    :ensure t
    :vc (:url "https://github.com/copilot-emacs/copilot.el"
    	    :rev :newest
              :branch "main")
    :hook '((prog-mode . copilot-mode))
    :bind (:map copilot-completion-map
    	      ("M-l" . #'copilot-accept-completion)
    	      ("TAB" . #'copilot-accept-completion)
    	      ("C-TAB" . #'copilot-accept-completion-by-word)
    	      ("C-<tab>" . #'copilot-accept-completion-by-word))
    :config
    (add-to-list 'copilot-indentation-alist '(prog-mode  2))
    (add-to-list 'copilot-indentation-alist '(org-mode  2))
    (add-to-list 'copilot-indentation-alist '(text-mode  2))
    (add-to-list 'copilot-indentation-alist '(closure-mode  2))
    (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode  2)))
#+end_src

GPTEL
#+begin_src emacs-lisp
  ;; (use-package gptel :vc (:url "https://github.com/karthink/gptel"
  ;;           		     :rev :newest
  ;;           		     :branch "master")
  ;;   :ensure t
  ;;   :config
  ;;   ;; (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "@user\n")
  ;;   ;; (setf (alist-get 'org-mode gptel-response-prefix-alist) "@assistant\n")
  ;;   (setq
  ;;    gptel-model 'gemini-2.5-flash
  ;;    gptel-default-mode 'org-mode
  ;;    gptel-backend (gptel-make-gemini "Gemini"
  ;;           	   :key (getenv "GEMINI_API_KEY")
  ;;         	   :stream t)
  ;;    ;; gptel-tools '("mcp-terminal-commander")
  ;;    )
  ;;   (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  ;;   (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
  ;;   (gptel-make-preset 'coding                       ;preset name, a symbol
  ;;     :description "A preset optimized for coding tasks" ;for your reference
  ;;     :backend "Claude"                     ;gptel backend or backend name
  ;;     :model 'claude-3-7-sonnet-20250219.1
  ;;     :system "You are an expert coding assistant. Your role is to provide high-quality code solutions, refactorings, and explanations."
  ;;     :tools '("read_buffer" "modify_buffer")) ;gptel tools or tool names
  ;;   )

  ;; (use-package mcp
  ;;   :ensure t
  ;;   :after gptel
  ;;   :custom (mcp-hub-servers
  ;;     	   `(("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
  ;;     	     ("terminal-commander" . (:command "uvx" :args ("terminal_controller")))
  ;;     	     ))
  ;;   :config
  ;;   (require 'mcp-hub)
  ;;   (require 'gptel-integrations)
  ;;   ;; :hook (after-init . mcp-hub-start-all-server)
  ;;   )
#+end_src

* KEYCASTER
#+begin_src emacs-lisp

  (use-package keycast
    :ensure t
    :hook (after-init . keycast-mode)
    :config
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-modeline)."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))

    (add-to-list 'global-mode-string '("" keycast-mode-line)))

  (with-eval-after-load 'keycast
    (add-to-list 'global-mode-string '("" mode-line-keycast)))
#+end_src

* DEBUGGING
#+begin_src emacs-lisp
  (use-package dape
    :ensure t
    :init
    (use-package repeat
      :ensure t
      :config (repeat-mode))
    :config
    ;; Show UI buffers on the right
    (setq dape-buffer-window-arrangement 'right))
#+end_src

* BUFFER PLACEMENTS

#+begin_src emacs-lisp
  (defun my/focus-buffer (window)
    (select-window window))

  (defun my/turn-off-line-numbers (window)
    (with-current-buffer (window-buffer window)
      (display-line-numbers-mode -1)))

  (add-to-list 'display-buffer-alist
    	     '("^\\*eldoc\\*"
    	       (display-buffer-at-bottom)
    	       (display-buffer-reuse-mode-window)
    	       (body-function . my/focus-buffer)
    	       (window-height . 10)))
  (add-to-list 'display-buffer-alist
    	     '("^\\*vterm\\*"
  	       (display-buffer-reuse-window
  		display-buffer-same-window)
    	       (body-function . my/turn-off-line-numbers)))
  (add-to-list 'display-buffer-alist
    	     '("^\\*Flutter\\*"
    	       (display-buffer-at-bottom)
    	       (display-buffer-reuse-mode-window)
    	       (body-function . my/focus-buffer)
  	       (window-height . 10)))
  (add-to-list 'display-buffer-alist
  	     '("\\*Flymake diagnostics for \*"
  	       (display-buffer-at-bottom)
  	       (display-buffer-reuse-mode-window)
  	       (body-function . my/focus-buffer)
  	       (window-height . 10)))
#+end_src

* TERMINALS
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

* HELPFUL
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    (([remap describe-function] . helpful-function)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-key]      . helpful-key)
     ([remap describe-symbol]   . helpful-symbol)
     ("C-h F" . helpful-function)
     ("C-h V" . helpful-variable)
     ("C-h K" . helpful-key)
     ("C-h S" . helpful-symbol)))

#+end_src

* DIRED
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh --group-directories-first")
  (setq dired-hide-details-hide-symlink-targets nil)

  ;; Hide dot entries
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)))
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package diredfl
    :ensure t
    :hook (dired-mode . diredfl-mode))
  (setq dired-recursive-deletes 'always
        dired-recursive-copies 'always)
  (use-package dirvish
    :ensure t
    :init (dirvish-override-dired-mode))
  (setq nerd-icons-scale-factor 1.0) 
  (setq all-the-icons-scale-factor 0.5)
#+end_src

* FORMATTERS
#+begin_src emacs-lisp
  ;; Apheleia for auto-formatting
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1)
    
    ;; Custom formatter commands (override defaults if needed)
    (setf (alist-get 'zig-fmt apheleia-formatters)
    	'("zig" "fmt" "--stdin"))
    
    ;; ;; Python: combine black + isort (alternative formatter)
    ;; (setf (alist-get 'python-black-isort apheleia-formatters)
    ;;       '("bash" "-c" "isort --stdout - | black --quiet -"))
    
    ;; Disable apheleia for specific modes if needed
    ;; Examples:
    ;; (setf (alist-get 'org-mode apheleia-mode-alist) nil)
    ;; (setf (alist-get 'fundamental-mode apheleia-mode-alist) nil)
    
    ;; Configure apheleia behavior
    (setq apheleia-remote-algorithm 'cancel     ; Cancel remote formatting if it takes too long
          apheleia-log-only-errors t            ; Only log errors, not successful formats
          apheleia-hide-log-buffers t)          ; Hide log buffers automatically
    
    ;; Optional: disable format-on-save for specific conditions
    ;; (add-to-list 'apheleia-inhibit-functions
    ;;              (lambda () (derived-mode-p 'org-mode)))
    ;; (add-to-list 'apheleia-inhibit-functions
    ;;              (lambda () (and (buffer-file-name)
    ;;                              (string-match-p "\\.min\\." (buffer-file-name)))))
    
    ;; Integration with eglot for import organization
    ;; This hook will run eglot's organize imports before apheleia formats
    (when (featurep 'eglot)
      (defun apheleia-eglot-organize-imports-before-format ()
        "Organize imports using eglot before formatting with apheleia."
        (when (and (eglot-current-server)
                   (eglot--server-capable :codeActionProvider))
          (ignore-errors
            (eglot-code-action-organize-import 1))))
      
      ;; Add the hook to run before apheleia formats
      (add-hook 'apheleia-pre-format-hook #'apheleia-eglot-organize-imports-before-format)))

  (defun my/eglot-organize-imports-on-save ()
    "Organize imports before saving Dart files."
    (interactive)
    (when (and (eq major-mode 'dart-mode)
    	     (bound-and-true-p eglot--managed-mode)
    	     (eglot--server-capable :codeActionProvider))
      (eglot-code-actions nil nil "source.organizeImports" t)))
    #+end_src
* PADDING
#+begin_src emacs-lisp
  (use-package spacious-padding
    :ensure t
    :if (display-graphic-p)
    :after doom-modeline
   :bind 
    :config
    (setq spacious-padding-widths
    '( :internal-border-width 15
         :header-line-width 4
         :mode-line-width 8
         :tab-width 4
         :right-divider-width 30
         :scroll-bar-width 8
         ;; :fringe-width 8
         ))

    ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
    ;; is very flexible and provides several examples.
    (setq spacious-padding-subtle-frame-lines
    `( :mode-line-active "#FFFFFF"
         :mode-line-inactive vertical-border))

    (spacious-padding-mode 1)

    ;; Set a key binding if you need to toggle spacious padding.
    (define-key global-map (kbd "<f8>") #'spacious-padding-mode)
    )
#+end_src

* FINAL FIXES
#+begin_src emacs-lisp
  ;; (setq window-divider-default-places t
  ;;       window-divider-default-bottom-width 10
  ;;       window-divider-default-right-width 10)
  ;; (window-divider-mode -1)
  ;; (custom-set-faces
  ;;  `(window-divider ((t (:foreground ,(face-attribute 'default :background)))))   ;; normal
  ;;  `(window-divider-first-pixel ((t (:foreground ,(face-attribute 'default :background)))))
  ;;  `(window-divider-last-pixel ((t (:foreground ,(face-attribute 'default :background))))))
#+end_src

* LINUX SYSTEM
#+begin_src emacs-lisp
  (defun system-options (option)
    "Run linux system commands"
    (interactive (list (completing-read "Choose system action: " '("reboot" "suspend" "poweroff"))))
    (cond
     ((equal option "suspend") (shell-command "systemctl suspend"))
     ((equal option "reboot") (shell-command "systemctl reboot"))
     ((equal option "poweroff") (shell-command "systemctl poweroff"))
     ))
#+end_src

* CUSTOM FUNCTION
#+begin_src emacs-lisp
  (defun open-line-below ()
    (interactive)
    (end-of-line)
    (open-line 1)
    (next-line))
    
  (defun open-line-above ()
    (interactive) 
    (end-of-line 0)
    (open-line 1)
    (next-line))

  (defun move-to-matching-quotes ()
    (interactive)
    (re-search-forward "[\"']"))

  (defun select-inner-quotes ()
    (interactive)
    (move-to-matching-quotes)
    (set-mark (point))
    (move-to-matching-quotes)
    (backward-char))

  (defun delete-inner-quotes ()
    (interactive)
    (select-inner-quotes)
    (backward-delete-char-untabify 1))

  (global-set-key (kbd "M-\'") #'select-inner-quotes)
  (global-set-key (kbd "C-M-\'") #'delete-inner-quotes)
  (global-set-key (kbd "M-RET") #'open-line-below)
  (global-set-key (kbd "C-M-<return>") #'open-line-above)
#+end_src
